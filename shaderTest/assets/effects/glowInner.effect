// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        glowColor: {
            value: [1.0, 1.0, 1.0, 1.0],
            editor: {
                type: color,
                tooltip: "发光颜色",
            }
        }
        glowColorSize: {
            value: 10,
            editor: {
                tooltip: "发光宽度"
            }
        }
        glowThreshold: {
            value: 1,
            editor: {
                tooltip: "发光阈值"
            }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
    precision highp float;

    #include <alpha-test>

    in vec4 v_color;

    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    #endif

    #if SHOW_INNER_GLOW
    uniform glow {
        vec4 glowColor;         // 发光颜色
        float glowColorSize;    // 发光宽度
        float glowThreshold;    // 发光阈值
    };

    vec4 getTextureColor(sampler2D texture, vec2 uv) {
        if (uv.x < -1.0 || uv.x > 1.0 || uv.y < -1.0 || uv.y > 1.0) {
            return vec4(0.0, 0.0, 0.0, 0.0);
        }
        return texture(texture, uv);
    }

    float getColorAlpha(float angle, float dist) {
        float radian = radians(angle);
        vec4 color = getTextureColor(texture, v_uv0 + vec2(dist * cos(radian), dist * sin(radian)));
        return color.a;
    }

    float getAverageAlpha(float dist) {
        float totalAlpha = 0.0;
        totalAlpha += getColorAlpha(0.0, dist);
        totalAlpha += getColorAlpha(30.0, dist);
        totalAlpha += getColorAlpha(60.0, dist);
        totalAlpha += getColorAlpha(90.0, dist);
        totalAlpha += getColorAlpha(120.0, dist);
        totalAlpha += getColorAlpha(150.0, dist);
        totalAlpha += getColorAlpha(180.0, dist);
        totalAlpha += getColorAlpha(210.0, dist);
        totalAlpha += getColorAlpha(240.0, dist);
        totalAlpha += getColorAlpha(270.0, dist);
        totalAlpha += getColorAlpha(300.0, dist);
        totalAlpha += getColorAlpha(330.0, dist);
        return totalAlpha / 12.0;
    }

    float getGlowAlpha() {
        if (glowColorSize == 0.0) {
            return 0.0;
        }

        vec4 color = getTextureColor(texture, v_uv0);
        if (color.a <= glowThreshold) {
            return color.a;
        }

        float totalAlpha = 0.0;
        totalAlpha += getAverageAlpha(glowColorSize * 0.1);
        totalAlpha += getAverageAlpha(glowColorSize * 0.2);
        totalAlpha += getAverageAlpha(glowColorSize * 0.3);
        totalAlpha += getAverageAlpha(glowColorSize * 0.4);
        totalAlpha += getAverageAlpha(glowColorSize * 0.5);
        totalAlpha += getAverageAlpha(glowColorSize * 0.6);
        totalAlpha += getAverageAlpha(glowColorSize * 0.7);
        totalAlpha += getAverageAlpha(glowColorSize * 0.8);
        totalAlpha += getAverageAlpha(glowColorSize * 0.9);
        totalAlpha += getAverageAlpha(glowColorSize * 1.0);
        return totalAlpha * 0.1;
    }

    #endif

    void main () {
        vec4 o = vec4(1, 1, 1, 1);

        #if USE_TEXTURE
        o *= texture(texture, v_uv0);
            #if CC_USE_ALPHA_ATLAS_TEXTURE
            o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
            #endif
        #endif

        o *= v_color;

        ALPHA_TEST(o);

        gl_FragColor = o;

        #if SHOW_INNER_GLOW
        vec4 color_dest = o;

        float alpha = getGlowAlpha();
        if (alpha > glowThreshold) {
            alpha = 1.0 - alpha;
            alpha = -1.0 * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) + 1.0;
        }

        vec4 color_src = glowColor * alpha;

        gl_FragColor = color_src * color_src.a + color_dest;
        #endif
    }
}%
