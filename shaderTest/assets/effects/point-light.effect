// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        pointColor: {
            value: [1.0, 1.0, 1.0, 1.0],
            editor: {
                type: color,
                tooltip: "点光颜色"
            }
        }
        pointCoord: {
            value: [0.0, 0.0],
            editor: {
                tooltip: "点光坐标"
            }
        }
        radius: {
            value: 1.0,
            editor: {
                tooltip: "点光半径"
            }
        }
        fogFlag: {
            value: 1.0,
            editor: {
                tooltip: "迷雾效果"
            }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
    precision highp float;

    #include <alpha-test>

    in vec4 v_color;

    #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    #endif

    #if USE_POINT_LIGHT
    uniform PointLight {
        vec4 pointColor;
        vec2 pointCoord;
        float radius;
        float fogFlag;
    };

    vec4 getColor(vec4 textureColor, vec2 centerPoint, float radius,vec4 centerColor) {
        float dis = distance(v_uv0, centerPoint);
        float a = 1.0;

        if (textureColor.a < 0.01) {
            a *= 0.0;
        }

        if (fogFlag == 0.0) {
            a *= (dis > radius ? 0.0 : 1.0);
        }

        if (radius == 0.0) {
            radius = 0.0001;
        }
        a *= 1.0 - (dis / radius);

        vec4 color = centerColor * a;
        return textureColor * textureColor.a + color;
    }
    #endif

    void main () {
        vec4 o = vec4(1, 1, 1, 1);

        #if USE_TEXTURE
        o *= texture(texture, v_uv0);
            #if CC_USE_ALPHA_ATLAS_TEXTURE
            o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
            #endif
        #endif

        o *= v_color;

        ALPHA_TEST(o);

        gl_FragColor = o;

        #if USE_POINT_LIGHT

        gl_FragColor = getColor(gl_FragColor, pointCoord, radius, pointColor);//gl_FragColor * gl_FragColor.a + pointColor * alpha * 10.0;

        #endif
    }
}%
